# Shared behaviour of entities
const Entity = behaviour {
  set_pos: fn (mut&)({f32, f32}) -> void,
  read_pos: fn (&)() -> {f32, f32}
}

# A function with accepts a behaviour instead of a type
const movementSystem = (mut entity: &Entity) => {
  let {x, y} = entity.read_pos()

  x += 10.0
  y += 15.0

  entity.set_pos({x, y})
}

# A record representing a player
const Player = record {
  pos: {f32, f32}
}

# Implementing Entity for player
def set_pos(mut &Player) = (pos: {f32, f32}) => {
  self.pos = pos
}

def read_pos(&Player) = (): {f32, f32} => {
  self.pos
}

# A record representing an enemy
const Enemy = record {
  pos: {f32, f32}
}

# Implementing Entity for enemy
def set_pos(mut &Enemy) = (pos) => {
  self.pos = pos
}

def read_pos(&Enemy) = () => {
  self.pos
}

# Instantiating enemy and player
let (
  player = Player{}
  enemy = Enemy{}
)

# Calling movementSystem on a player and enemy
movementSystem(&player)
movementSystem(&enemy)
